# OpenResty nginx.conf for Auth0 SSO Reverse Proxy behind AWS ALB (HTTP only)

# user nginx;
worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log info;
pid  /usr/local/openresty/nginx/logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include       /usr/local/openresty/nginx/conf/mime.types;
  default_type  application/octet-stream;

  # ---- Logs ----
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" "$http_x_forwarded_proto"';
  access_log /usr/local/openresty/nginx/logs/access.log main;

  # ---- Performance ----
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 50;      # ALB の idle timeout(既定60s)より短めに
  types_hash_max_size 2048;

  # ---- Gzip ----
  gzip on;
  gzip_vary on;
  gzip_min_length 1024;
  gzip_types
      text/plain
      text/css
      text/xml
      application/xml
      application/json
      application/javascript;

  # ---- Security headers (base) ----
  add_header X-Frame-Options DENY always;
  add_header X-Content-Type-Options nosniff always;
  server_tokens off;

  # ---- Lua / OIDC caches ----
  lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
  lua_shared_dict discovery    2m;  # OIDC discovery cache
  lua_shared_dict jwks         2m;  # JWKs cache
  lua_shared_dict sessions    16m;  # lua-resty-session
  lua_shared_dict introspection 1m;
  lua_shared_dict cookiejar   32m;  # upstream session cookies (fallback; Redis推奨)

  # ---- TLS verification for outbound Lua HTTP ----
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 3;

  # ---- DNS resolver ----
  resolver 169.254.169.253 1.1.1.1 8.8.8.8 ipv6=off valid=300s;  # Amazon Route 53 Resolver(EC2) + 公開DNS

  # ---- Proxy defaults ----
  client_max_body_size 10m;
  proxy_buffering on;
  proxy_read_timeout 55s;    # ALB idle timeout より短めに
  proxy_send_timeout 55s;

  # ---- Global configuration (init phase) ----
  init_by_lua_block {
    -- 設定モジュールをロード
    local config = require("config")

    -- OIDC設定とサイト定義をグローバルに登録
    local ok, oidc_opts = pcall(config.oidc_opts)
    if not ok then
      ngx.log(ngx.ERR, "Failed to load OIDC config: ", oidc_opts)
      error("OIDC configuration failed")
    end
    
    local sites = config.sites()
    
    -- グローバルに保存（読み取り専用として扱う）
    package.loaded["OIDC_OPTS"] = oidc_opts
    package.loaded["SITES"] = sites
    package.loaded["CONFIG"] = config  -- 設定モジュール自体も保存
    
    ngx.log(ngx.INFO, "Configuration loaded successfully")
    ngx.log(ngx.INFO, "OIDC domain: ", oidc_opts.discovery)
    -- サイト一覧をログに出力
    local site_names = {}
    for name, _ in pairs(sites) do
      table.insert(site_names, name)
    end
    ngx.log(ngx.INFO, "Sites configured: ", table.concat(site_names, ", "))
  }

  # 下位の server 設定を読み込み
  include /usr/local/openresty/nginx/conf/conf.d/*.conf;
}
