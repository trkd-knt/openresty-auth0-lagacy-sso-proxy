server {
  listen 8080 default_server;
  server_name _;   # ALB の Host ヘッダで仮想ホストする場合は conf を分ける
 
  # 変数付き proxy_pass 用の初期化
  set $upstream "";

  # ALB が付与するヘッダ（必須）
  # X-Forwarded-Proto: https
  # X-Forwarded-For:  <client-ip>, <alb-ip>
  # X-Forwarded-Host: original host

  # 外部的には https 運用。lua-resty-openidc の redirect_uri は絶対URL(https://)で指定しておくこと。
  # 例: opts.redirect_uri = "https://proxy.example.com/callback"

  # 健康チェック（ALB Target Group）
  location = /healthz { return 200 "ok\n"; }

  # OIDC callback
  location = /callback {
    access_by_lua_block {
      local oidc = require("resty.openidc")
      local opts = package.loaded["OIDC_OPTS"]
      local res, err = oidc.authenticate(opts)
      if err then
        ngx.log(ngx.ERR, "OIDC callback error: ", err)
        return ngx.exit(500)
      end
      return ngx.redirect("/")
    }
  }

  # ログアウト（必要に応じて）
  location = /logout {
    content_by_lua_block {
      local oidc = require("resty.openidc")
      local opts = package.loaded["OIDC_OPTS"]
      oidc.logout(opts, nil, "/")
    }
  }

  # 資格情報収集/管理UI
  location ^~ /__cred/ {
    # GET: フォーム、POST: 保存
    content_by_lua_file /usr/local/openresty/nginx/lua/cred_handler.lua;
  }

  # 認可保護 + リバプロ
  location / {
    # 認証・自動ログイン
    access_by_lua_file /usr/local/openresty/nginx/lua/access_guard.lua;

    # ALB -> Nginx -> 上流 へのフォワードヘッダ
    proxy_set_header Host              $host;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Request-Id      $request_id;

    # 上流設定（Lua側で $upstream をセットする前提。固定なら直接URLでOK）
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    proxy_pass $upstream;   # access_guard.lua で set $upstream を行う実装
  }
}
